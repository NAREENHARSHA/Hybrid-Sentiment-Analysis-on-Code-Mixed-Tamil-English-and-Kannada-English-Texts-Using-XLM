# -*- coding: utf-8 -*-
"""NLP_HYBRID_Final_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZhW8jVSLfkpeRmA9egHJXrKvw84FEURn
"""

!pip install simpletransformers pandas scikit-learn torch

import pandas as pd
import torch
from simpletransformers.classification import ClassificationModel, ClassificationArgs
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load the Tamil-English dataset
tanglish_file_path = "/content/tamil_dataset_sentiments.csv"
df_tanglish = pd.read_csv(tanglish_file_path)
df_tanglish["language"] = "Tamil-English"

# Load the Kannada-English dataset
kannanglish_file_path = "/content/kannada_english_sentiments.csv"
df_kannanglish = pd.read_csv(kannanglish_file_path)
df_kannanglish["language"] = "Kannada-English"

# Merge datasets
df_hybrid = pd.concat([df_tanglish, df_kannanglish], ignore_index=True)

# Save the combined dataset
df_hybrid.to_csv("hybrid_tamil_kannada_sentiments.csv", index=False)

# Display dataset info
print(df_hybrid.info())
print(df_hybrid.head())

# Map sentiment labels to numerical values
label_map = {"Negative": 0, "Neutral": 1, "Positive": 2}
df_hybrid["sentiment"] = df_hybrid["sentiment"].map(label_map)

df_hybrid.dropna(inplace=True)  # Remove NaN values

# Split dataset into train (80%), validation (10%), and test (10%)
train_df, temp_df = train_test_split(df_hybrid, test_size=0.2, random_state=42, stratify=df_hybrid["sentiment"])
valid_df, test_df = train_test_split(temp_df, test_size=0.5, random_state=42, stratify=temp_df["sentiment"])

# Rename columns
train_df = train_df.rename(columns={"text": "text", "sentiment": "labels"})
valid_df = valid_df.rename(columns={"text": "text", "sentiment": "labels"})
test_df = test_df.rename(columns={"text": "text", "sentiment": "labels"})

# Convert labels to integer type
train_df["labels"] = train_df["labels"].astype(int)
valid_df["labels"] = valid_df["labels"].astype(int)
test_df["labels"] = test_df["labels"].astype(int)

# Define model arguments
model_args = ClassificationArgs()
model_args.num_train_epochs = 12
model_args.train_batch_size = 16
model_args.eval_batch_size = 16
model_args.learning_rate = 5e-6
model_args.weight_decay = 0.01
model_args.overwrite_output_dir = True
model_args.save_best_model = True
model_args.evaluate_during_training = True
model_args.use_early_stopping = True
model_args.early_stopping_patience = 2
model_args.output_dir = "xlm-roberta-hybrid-model"
model_args.best_model_dir = "xlm-roberta-best-hybrid"

# Initialize the model
model = ClassificationModel(
    "xlmroberta", "xlm-roberta-base",
    num_labels=3,  # Three sentiment classes (Positive, Negative, Neutral)
    args=model_args,
    use_cuda=torch.cuda.is_available()  # Use GPU if available
)

# Train the model
model.train_model(train_df, eval_df=valid_df)

# Evaluate the model
result, model_outputs, wrong_predictions = model.eval_model(valid_df, acc=accuracy_score)
print(f"Hybrid Model Accuracy: {result['acc']:.4f}")

# Function to predict sentiment
def predict_sentiment(text, model):
    predictions, raw_outputs = model.predict([text])
    confidence = torch.softmax(torch.tensor(raw_outputs[0]), dim=0).tolist()
    sentiment = {0: "Negative", 1: "Neutral", 2: "Positive"}[predictions[0]]
    print(f"Text: {text}\nPredicted Sentiment: {sentiment}\nConfidence Scores: {confidence}\n")
    return sentiment

# Predict sentiment for sample texts
test_sentences = [
    "Idhu super movie, acting channagide! 😍🔥",  # Positive (Kannanglish)
    "Padam vanthathum 13k dislike pottavaga yellam... 😡",  # Negative (Tanglish)
    "One time watch movie ide! 🎬🙂",  # Neutral (Kannanglish)
    "Comedy scenes super hit, namge chennagi ishtaaythu! 😂🤣",  # Positive (Kannanglish)
    "Second half thumba slow aaythu! 🐢😞",  # Negative (Kannanglish)
    "Music average ide, not bad! 🎵😌"  # Neutral (Kannanglish)
]

for text in test_sentences:
    predict_sentiment(text, model)

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import numpy as np

# Get actual labels from the test set
y_true = test_df["labels"].tolist()

# Predict labels using the trained model
y_pred, _ = model.predict(test_df["text"].tolist())

# Compute confusion matrix
cm = confusion_matrix(y_true, y_pred)

# Define labels
labels = ["Negative", "Neutral", "Positive"]

# Plot the heatmap
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=labels, yticklabels=labels)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix for Hybrid Sentiment Analysis")
plt.show()

